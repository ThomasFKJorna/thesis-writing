/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => NovelWordCountPlugin
});

// logic/file.ts
var import_obsidian = __toModule(require("obsidian"));
var FileHelper = class {
  constructor(vault) {
    this.vault = vault;
  }
  getAllFileCounts() {
    return __async(this, null, function* () {
      const files = this.vault.getMarkdownFiles();
      const counts = {};
      for (const file of files) {
        const contents = yield this.vault.cachedRead(file);
        const wordCount = this.countWords(contents);
        this.setCounts(counts, file, wordCount);
      }
      return counts;
    });
  }
  getCountDataForPath(counts, path) {
    if (counts.hasOwnProperty(path)) {
      return counts[path];
    }
    const childPaths = Object.keys(counts).filter((countPath) => path === "/" || countPath.startsWith(path + "/"));
    return childPaths.reduce((total, childPath) => {
      const childCount = this.getCountDataForPath(counts, childPath);
      total.wordCount += childCount.wordCount;
      total.pageCount += childCount.pageCount;
      total.createdDate = total.createdDate === 0 ? childCount.createdDate : Math.min(total.createdDate, childCount.createdDate);
      total.modifiedDate = Math.max(total.modifiedDate, childCount.modifiedDate);
      return total;
    }, {
      wordCount: 0,
      pageCount: 0,
      createdDate: 0,
      modifiedDate: 0
    });
  }
  updateFileCounts(abstractFile, counts) {
    return __async(this, null, function* () {
      if (abstractFile instanceof import_obsidian.TFolder) {
        Object.assign(counts, this.getAllFileCounts());
        return;
      }
      if (abstractFile instanceof import_obsidian.TFile) {
        const contents = yield this.vault.cachedRead(abstractFile);
        const wordCount = this.countWords(contents);
        this.setCounts(counts, abstractFile, wordCount);
      }
    });
  }
  countWords(content) {
    return (content.match(/[^\s]+/g) || []).length;
  }
  setCounts(counts, file, wordCount) {
    counts[file.path] = {
      wordCount,
      pageCount: Math.ceil(wordCount / 300),
      createdDate: file.stat.ctime,
      modifiedDate: file.stat.mtime
    };
  }
};

// main.ts
var import_obsidian2 = __toModule(require("obsidian"));
var CountType;
(function(CountType2) {
  CountType2["Word"] = "word";
  CountType2["Page"] = "page";
  CountType2["Created"] = "created";
  CountType2["Modified"] = "modified";
})(CountType || (CountType = {}));
var countTypes = [
  CountType.Word,
  CountType.Page,
  CountType.Created,
  CountType.Modified
];
var DEFAULT_SETTINGS = {
  countType: CountType.Word,
  abbreviateDescriptions: false
};
var NovelWordCountPlugin = class extends import_obsidian2.Plugin {
  get settings() {
    return this.savedData.settings;
  }
  constructor(app, manifest) {
    super(app, manifest);
    this.fileHelper = new FileHelper(this.app.vault);
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new NovelWordCountSettingTab(this.app, this));
      this.addCommand({
        id: "recount-vault",
        name: "Reanalyze (recount) all documents in vault",
        callback: () => __async(this, null, function* () {
          yield this.initialize();
        })
      });
      this.addCommand({
        id: "cycle-count-type",
        name: "Change data type to display",
        callback: () => __async(this, null, function* () {
          this.settings.countType = countTypes[(countTypes.indexOf(this.settings.countType) + 1) % countTypes.length];
          yield this.saveSettings();
          this.updateDisplayedCounts();
        })
      });
      this.handleEvents();
      this.initialize();
    });
  }
  onunload() {
    return __async(this, null, function* () {
      this.saveSettings();
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.savedData = Object.assign({}, yield this.loadData());
      this.savedData.settings = Object.assign({}, DEFAULT_SETTINGS, this.savedData.settings);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.savedData);
    });
  }
  initialize() {
    return __async(this, null, function* () {
      yield this.refreshAllCounts();
      try {
        yield this.updateDisplayedCounts();
      } catch (err) {
        setTimeout(() => {
          this.updateDisplayedCounts();
        }, 1e3);
      }
    });
  }
  updateDisplayedCounts() {
    return __async(this, null, function* () {
      if (!this.savedData.cachedCounts.hasOwnProperty("/")) {
        yield this.refreshAllCounts();
      }
      const fileExplorerLeaf = yield this.getFileExplorerLeaf();
      const fileItems = fileExplorerLeaf.view.fileItems;
      for (const path in fileItems) {
        const counts = this.fileHelper.getCountDataForPath(this.savedData.cachedCounts, path);
        const item = fileItems[path];
        item.titleEl.setAttribute("data-novel-word-count-plugin", this.getNodeLabel(counts));
      }
    });
  }
  getFileExplorerLeaf() {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        let foundLeaf = null;
        this.app.workspace.iterateAllLeaves((leaf) => {
          if (foundLeaf) {
            return;
          }
          const view = leaf.view;
          if (!view || !view.fileItems) {
            return;
          }
          foundLeaf = leaf;
          resolve(foundLeaf);
        });
        if (!foundLeaf) {
          reject(Error("Could not find file explorer leaf."));
        }
      });
    });
  }
  getNodeLabel(counts) {
    if (!counts || typeof counts.wordCount !== "number") {
      return "";
    }
    switch (this.settings.countType) {
      case CountType.Word:
        return this.settings.abbreviateDescriptions ? `${counts.wordCount.toLocaleString()}w` : `${counts.wordCount.toLocaleString()} word${counts.wordCount === 1 ? "" : "s"}`;
      case CountType.Page:
        return this.settings.abbreviateDescriptions ? `${counts.pageCount.toLocaleString()}p` : `${counts.pageCount.toLocaleString()} page${counts.pageCount === 1 ? "" : "s"}`;
      case CountType.Created:
        if (counts.createdDate === 0) {
          return "";
        }
        return this.settings.abbreviateDescriptions ? `${new Date(counts.createdDate).toLocaleDateString()}/c` : `Created ${new Date(counts.createdDate).toLocaleDateString()}`;
      case CountType.Modified:
        if (counts.modifiedDate === 0) {
          return "";
        }
        return this.settings.abbreviateDescriptions ? `${new Date(counts.modifiedDate).toLocaleDateString()}/u` : `Updated ${new Date(counts.modifiedDate).toLocaleDateString()}`;
    }
    return "";
  }
  handleEvents() {
    this.registerEvent(this.app.vault.on("modify", (file) => __async(this, null, function* () {
      yield this.fileHelper.updateFileCounts(file, this.savedData.cachedCounts);
      yield this.updateDisplayedCounts();
    })));
    this.registerEvent(this.app.vault.on("rename", () => __async(this, null, function* () {
      yield this.refreshAllCounts();
      yield this.updateDisplayedCounts();
    })));
  }
  refreshAllCounts() {
    return __async(this, null, function* () {
      this.savedData.cachedCounts = yield this.fileHelper.getAllFileCounts();
      yield this.saveSettings();
    });
  }
};
var NovelWordCountSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Novel word count settings" });
    new import_obsidian2.Setting(containerEl).setName("Data to show").setDesc("Word count, page count, created date, or last updated date").addDropdown((drop) => drop.addOption(CountType.Word, "Word Count").addOption(CountType.Page, "Page Count").addOption(CountType.Created, "Created Date").addOption(CountType.Modified, "Last Updated Date").setValue(this.plugin.settings.countType).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.countType = value;
      yield this.plugin.saveSettings();
      yield this.plugin.updateDisplayedCounts();
    })));
    new import_obsidian2.Setting(containerEl).setName("Abbreviate descriptions").setDesc("E.g. show '120w' instead of '120 words'").addToggle((toggle) => toggle.setValue(this.plugin.settings.abbreviateDescriptions).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.abbreviateDescriptions = value;
      yield this.plugin.saveSettings();
      yield this.plugin.updateDisplayedCounts();
    })));
    new import_obsidian2.Setting(containerEl).setName("Reanalyze all documents").setDesc("If changes have occurred outside of Obsidian, you may need to trigger a manual analysis").addButton((button) => button.setButtonText("Reanalyze").setCta().onClick(() => __async(this, null, function* () {
      button.disabled = true;
      yield this.plugin.initialize();
      button.setButtonText("Done");
      button.removeCta();
      setTimeout(() => {
        button.setButtonText("Reanalyze");
        button.setCta();
        button.disabled = false;
      }, 1e3);
    })));
  }
};
